#	%p: 输出日志信息优先级，即INFO，INFO，WARN，ERROR，FATAL,
#	%d: 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyy MMM dd HH:mm:ss,SSS}，输出类似：2002年10月18日 22：10：28，921
#	%r: 输出自应用启动到输出该log信息耗费的毫秒数
#	%c: 输出日志信息所属的类目，通常就是所在类的全名
#	%t: 输出产生该日志事件的线程名
#	%l: 输出日志事件的发生位置，相当于%C.%M(%F:%L)的组合,包括类目名、发生的线程，以及在代码中的行数。举例：Testlog4.main(TestLog4.java:10)
#	%x: 输出和当前线程相关联的NDC(嵌套诊断环境),尤其用到像java servlets这样的多客户多线程的应用中。
#	%%: 输出一个"%"字符
#	%F: 输出日志消息产生时所在的文件名称
#	%L: 输出代码中的行号
#	%m: 输出代码中指定的消息,产生的日志具体信息
#	%n: 输出一个回车换行符，Windows平台为"\r\n"，Unix平台为"\n"输出日志信息换行可以在%与模式字符之间加上修饰符来控制其最小宽度、最大宽度、和文本的对齐方式。如：
#		1)%20c：指定输出category的名称，最小的宽度是20，如果category的名称小于20的话，默认的情况下右对齐。
#		2)%-20c:指定输出category的名称，最小的宽度是20，如果category的名称小于20的话，"-"号指定左对齐。
#		3)%.30c:指定输出category的名称，最大的宽度是30，如果category的名称大于30的话，就会将左边多出的字符截掉，但小于30的话也不会有空格。
#		4)%20.30c:如果category的名称小于20就补空格，并且右对齐，如果其名称长于30字符，就从左边交远销出的字符截掉。

##############################################################################################
# 下面给出得Log4J配置文件实现了输出到控制台，文件，回滚文件，发送日志邮件，输出到数据库日志表，自定义标签等全套功能。
##############################################################################################
# 日志记录器（Logger）的行为是分等级的。具体分为：OFF、 FATAL、ERROR、WARN、INFO、INFO、TRACE、ALL
# 将等级为INFO的日志信息输出到后面指定的目的地
log4j.rootLogger=INFO,CONSOLE,A1,ROLLING_FILE
#INFO,CONSOLE,FILE,ROLLING_FILE,MAIL,DATABASE

log4j.addivity.org.apache=true

###################
# Console Appender 输出日志到控制台
###################
log4j.appender.CONSOLE=org.apache.log4j.ConsoleAppender
log4j.appender.CONSOLE.Threshold=INFO
log4j.appender.CONSOLE.Target=System.out
log4j.appender.CONSOLE.layout=org.apache.log4j.PatternLayout
log4j.appender.CONSOLE.layout.ConversionPattern=[we-repay] %d{yyyy-MM-dd HH\:mm\:ss} %5p %c %x %L - %m%n


#####################
# File Appender 产生一个日志文件
#####################
log4j.appender.FILE=org.apache.log4j.FileAppender
log4j.appender.FILE.File=${catalina.home}/logs/we-repay.log
# 到指定大小后是否继续记录日志，false清空再记录
log4j.appender.FILE.Append=false
log4j.appender.FILE.layout=org.apache.log4j.PatternLayout
log4j.appender.FILE.layout.ConversionPattern=[we-repay] %d - %c -%-4r [%t] %-5p %c %x - %m%n
# Use this layout for LogFactor 5 analysis


########################
# Rolling File文件大小到达指定尺寸的时候产生一个新的文件
########################
log4j.appender.ROLLING_FILE=org.apache.log4j.RollingFileAppender
log4j.appender.ROLLING_FILE.Threshold=ERROR
log4j.appender.ROLLING_FILE.File=${catalina.home}/logs/we-repay_err.log
# 到指定大小后是否转存日志到备份日志文件
log4j.appender.ROLLING_FILE.Append=true
log4j.appender.ROLLING_FILE.MaxFileSize=10240KB
log4j.appender.ROLLING_FILE.MaxBackupIndex=10
log4j.appender.ROLLING_FILE.layout=org.apache.log4j.PatternLayout
log4j.appender.ROLLING_FILE.layout.ConversionPattern=[we-repay] %d - %c -%-4r [%t] %-5p %c %x - %m%n

########################
# Daily Rolling File Appender每天产生一个日志文件
#######################
log4j.appender.A1=org.apache.log4j.DailyRollingFileAppender
log4j.appender.A1.Threshold=INFO
log4j.appender.A1.File=${catalina.home}/logs/we-repay.log
log4j.appender.A1.DatePattern='.'yyyy-MM-dd
log4j.appender.A1.layout=org.apache.log4j.PatternLayout
log4j.appender.A1.layout.ConversionPattern=[we-repay] %d{yyyy-MM-dd HH\:mm\:ss} %5p %c %x %L - %m%n


log4j.logger.com.ibatis = INFO
log4j.logger.com.ibatis.common.jdbc.SimpleDataSource = INFO
log4j.logger.com.ibatis.common.jdbc.ScriptRunner = INFO
log4j.logger.com.ibatis.sqlmap.engine.impl.SqlMapClientDelegate = INFO

log4j.logger.java.sql.Connection = INFO
log4j.logger.java.sql.Statement = INFO
log4j.logger.java.sql.PreparedStatement = INFO
log4j.logger.java.sql.ResultSet =INFO